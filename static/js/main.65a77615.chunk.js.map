{"version":3,"sources":["components/DynamicCard/index.js","components/CardList/index.js","App.js","reportWebVitals.js","index.js"],"names":["DynamicCard","card","cardDate","title","description","buttonText","color","Col","sm","Card","style","backgroundColor","Header","className","Body","Footer","Button","variant","defaultProps","CardList","cardInfo","id","boxtitle","boxtext","defaultcards","cards","useState","count","setcount","inputtext","useRef","Container","fluid","Row","length","slice","map","renderContent","lg","InputGroup","Prepend","onClick","current","value","replace","FormControl","ref","onBlur","e","target","blur","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0wMAIMA,EAAc,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACbC,EAAoDD,EAApDC,SAAUC,EAA0CF,EAA1CE,MAAOC,EAAmCH,EAAnCG,YAAaC,EAAsBJ,EAAtBI,WAAYC,EAAUL,EAAVK,MAClD,OACE,cAACC,EAAA,EAAD,CAAKC,GAAI,EAAT,SACE,eAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,gBAAgB,GAAD,OAAKL,IAAnC,UACE,eAACG,EAAA,EAAKG,OAAN,CAAaC,UAAU,kBAAvB,UACE,6BAAKX,IACL,oBAAIW,UAAU,YAAd,SAA2BV,OAE7B,cAACM,EAAA,EAAKK,KAAN,CAAWD,UAAU,+BAArB,SACE,mBAAGA,UAAU,YAAb,SAA0BT,MAE5B,cAACK,EAAA,EAAKM,OAAN,CAAaF,UAAU,eAAvB,SACE,cAACG,EAAA,EAAD,CAAQC,QAAQ,gBAAhB,SAAiCZ,YAiB3CL,EAAYkB,aAAe,CACzBhB,SAAU,GACVC,MAAO,GACPC,YAAa,GACbC,WAAY,GACZC,MAAO,IAGMN,Q,gCC9BTmB,EAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACVC,EAA+CD,EAA/CC,GAAIC,EAA2CF,EAA3CE,SAAUC,EAAiCH,EAAjCG,QAASC,EAAwBJ,EAAxBI,aAAcC,EAAUL,EAAVK,MADZ,EAGPC,mBAASF,GAHF,mBAG1BG,EAH0B,KAGnBC,EAHmB,KAI3BC,EAAYC,iBAAO,MAoBzB,OACE,eAACC,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACE,oBAAInB,UAAU,6BAAd,SAA4CS,IAC5C,mBAAGT,UAAU,YAAb,SAA0BU,IAC1B,cAACU,EAAA,EAAD,CAAKpB,UAAU,YAAf,SAdkB,SAACY,GACrB,OAAOA,GAASA,EAAMS,QAAUP,EAC5BF,EAAMU,MAAM,EAAGR,GAAOS,KAAI,SAACnC,GACzB,OAAO,cAAC,EAAD,CAA2BA,KAAMA,GAAfA,EAAKoB,OAEhCI,EACGU,MAAM,EAAGV,EAAMS,QACfE,KAAI,SAACnC,GAAD,OAAU,cAAC,EAAD,CAAsBA,KAAMA,GAAVoB,MAOTgB,CAAcZ,KAC1C,cAACQ,EAAA,EAAD,CAAKpB,UAAU,2CAAf,SACE,cAACN,EAAA,EAAD,CAAKC,GAAI,EAAG8B,GAAI,EAAhB,SACE,eAACC,EAAA,EAAD,CAAY1B,UAAU,OAAtB,UACE,cAAC0B,EAAA,EAAWC,QAAZ,UACE,cAACxB,EAAA,EAAD,CAAQC,QAAQ,iBAAiBwB,QAvBzB,WAClBb,EAASC,EAAUa,QAAQC,MAAMC,QAAQ,KAAM,MAsBrC,yBAIF,cAACC,EAAA,EAAD,CACEC,IAAKjB,EACLkB,OAAQ,SAACC,GAAD,OAjCP,SAACA,GACZpB,EAASoB,EAAEC,OAAON,MAAMC,QAAQ,KAAM,KAgCbM,CAAKF,IACpBnC,UAAU,oBASxBM,EAASD,aAAe,CACtBG,GAAI,EACJC,SAAU,GACVC,QAAS,GACTC,aAAc,EACdC,MAAO,IAqBMN,QC/EAgC,MAJf,WACE,OAAO,cAAC,EAAD,CAAU/B,SAAUA,KCOdgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.65a77615.chunk.js","sourcesContent":["import React from \"react\";\nimport { Col, Card, Button } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\n\nconst DynamicCard = ({ card }) => {\n  const { cardDate, title, description, buttonText, color } = card;\n  return (\n    <Col sm={4}>\n      <Card style={{ backgroundColor: `${color}` }}>\n        <Card.Header className=\"border-bottom-0\">\n          <h5>{cardDate}</h5>\n          <h1 className=\"text-left\">{title}</h1>\n        </Card.Header>\n        <Card.Body className=\"text-left pt-3 overflow-auto\">\n          <p className=\"text-left\">{description}</p>\n        </Card.Body>\n        <Card.Footer className=\"border-top-0\">\n          <Button variant=\"outline-light\">{buttonText}</Button>\n        </Card.Footer>\n      </Card>\n    </Col>\n  );\n};\n\nDynamicCard.propTypes = {\n  cardInfo: PropTypes.shape({\n    cardDate: PropTypes.string,\n    title: PropTypes.string,\n    description: PropTypes.string,\n    buttonText: PropTypes.string,\n    color: PropTypes.string,\n  }),\n};\n\nDynamicCard.defaultProps = {\n  cardDate: \"\",\n  title: \"\",\n  description: \"\",\n  buttonText: \"\",\n  color: \"\",\n};\n\nexport default DynamicCard;\n","import React, { useState, useRef } from \"react\";\nimport DynamicCard from \"../DynamicCard\";\nimport {\n  Button,\n  Container,\n  Row,\n  Col,\n  InputGroup,\n  FormControl,\n} from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\n\nconst CardList = ({ cardInfo }) => {\n  const { id, boxtitle, boxtext, defaultcards, cards } = cardInfo;\n\n  const [count, setcount] = useState(defaultcards);\n  const inputtext = useRef(null);\n\n  const blur = (e) => {\n    setcount(e.target.value.replace(/\\D/, \"\"));\n  };\n\n  const handleClick = () => {\n    setcount(inputtext.current.value.replace(/\\D/, \"\"));\n  };\n\n  const renderContent = (cards) => {\n    return cards && cards.length >= count\n      ? cards.slice(0, count).map((card) => {\n          return <DynamicCard key={card.id} card={card} />;\n        })\n      : cards\n          .slice(0, cards.length)\n          .map((card) => <DynamicCard key={id} card={card} />);\n  };\n\n  return (\n    <Container fluid>\n      <h2 className=\"text-left pt-5 text-danger\">{boxtitle}</h2>\n      <p className=\"text-left\">{boxtext}</p>\n      <Row className=\"flex-wrap\">{renderContent(cards)}</Row>\n      <Row className=\"d-flex justify-content-end pt-3 flex-row\">\n        <Col sm={1} lg={3}>\n          <InputGroup className=\"mb-3\">\n            <InputGroup.Prepend>\n              <Button variant=\"outline-danger\" onClick={handleClick}>\n                Read more\n              </Button>\n            </InputGroup.Prepend>\n            <FormControl\n              ref={inputtext}\n              onBlur={(e) => blur(e)}\n              className=\"ml-2\"\n            />\n          </InputGroup>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nCardList.defaultProps = {\n  id: 0,\n  boxtitle: \"\",\n  boxtext: \"\",\n  defaultcards: 0,\n  cards: [],\n};\n\nCardList.propTypes = {\n  cardInfo: PropTypes.shape({\n    id: PropTypes.number,\n    boxtitle: PropTypes.string,\n    boxtext: PropTypes.string,\n    defaultcards: PropTypes.number,\n    cards: PropTypes.arrayOf(\n      PropTypes.shape({\n        cardDate: PropTypes.string,\n        title: PropTypes.string,\n        description: PropTypes.string,\n        buttonText: PropTypes.string,\n        color: PropTypes.string,\n      })\n    ),\n  }),\n};\n\nexport default CardList;\n","import \"./App.scss\";\nimport cardInfo from \"./cards.json\";\nimport CardList from \"./components/CardList\";\n\nfunction App() {\n  return <CardList cardInfo={cardInfo} />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}